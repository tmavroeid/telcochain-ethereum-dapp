
// This script is designed to test the solidity smart contract - SuppyChain.sol -- and the various functions within
// Declare a variable and assign the compiled smart contract artifact
var SupplyChain = artifacts.require('SupplyChain');

//const truffleAssert = require('truffle-assertions');

contract('SupplyChain', function(accounts) {
    // Declare few constants and assign a few sample accounts generated by ganache-cli
    var sku = 1
    var upc = 1
    const ownerID = accounts[0]
    const originRetailerID = accounts[1]
    const companyDepartmentReceivingID = accounts[2]
    const companyDepartmentPlanningID = accounts[3]
    const companyDepartmentApprovingID = accounts[4]
    const vendorID = accounts[5]
    const distributionCenterID = accounts[6]
    const customerID = accounts[7]
    const assetIsAvailable = true;
    var productID = sku + upc
    const productNotes = "Best version of iPhone in the market."
    var num = 1;
    var n = num.toString();
    const productPrice = web3.utils.toWei(n, "ether")
    var itemState = 0
    //const distributorID = accounts[2]
    //const retailerID = accounts[3]
    //const consumerID = accounts[4]
    const emptyAddress = '0x00000000000000000000000000000000000000'
    const truffleAssert = require('truffle-assertions');

    var   requestID = 1; //Request ID of each asset identifying every request made by retailers
    const requestedAssetName = "iPhone8"; //Name of the asset
    const assetQuantity = 5; // Quantity of asset
    //const originRetailerID = accounts[1]; // Metamask-Ethereum address of the Retailer
    const originRetailerName = "Glyfada Shop"; // Retailer Name
    const originCompanyDepartmentID = accounts[2];

    ///Available Accounts
    ///==================
    ///(0) 0x27d8d15cbc94527cadf5ec14b69519ae23288b95
    ///(1) 0x018c2dabef4904ecbd7118350a0c54dbeae3549a
    ///(2) 0xce5144391b4ab80668965f2cc4f2cc102380ef0a
    ///(3) 0x460c31107dd048e34971e57da2f99f659add4f02
    ///(4) 0xd37b7b8c62be2fdde8daa9816483aebdbd356088
    ///(5) 0x27f184bdc0e7a931b507ddd689d76dba10514bcb
    ///(6) 0xfe0df793060c49edca5ac9c104dd8e3375349978
    ///(7) 0xbd58a85c96cc6727859d853086fe8560bc137632
    ///(8) 0xe07b5ee5f738b2f87f88b99aac9c64ff1e0c7917
    ///(9) 0xbd3ff2e3aded055244d66544c9c059fa0851da44

    console.log("ganache-cli accounts used here...")
    console.log("Contract Owner: accounts[0] ", accounts[0])
    console.log("Retailer: accounts[1] ", accounts[1])
    console.log("Company Department receiving the request: accounts[2] ", accounts[2])
    console.log("CompanyDepartment planning the asset request: accounts[3] ", accounts[3])
    console.log("CompanyDepartment approving the asset request: accounts[4] ", accounts[4])
    console.log("Vendor: accounts[5] ", accounts[5])
    console.log("DistributionCenter: accounts[6] ", accounts[6])
    console.log("Customer: accounts[7] ", accounts[7])

    // 1st Test
    it("Testing smart contract function requestAsset() that allows a retailer to submit a request for an asset", async() => {

        const supplyChain = await SupplyChain.deployed()
        let result = await supplyChain.requestAsset(requestID, requestedAssetName, assetQuantity, originRetailerID, originRetailerName, companyDepartmentReceivingID, {from: originRetailerID});

        // Declare and Initialize a variable for event
        var eventEmitted = false;

        //Watch the emitted event Requested()
        var event = supplyChain.Requested();


        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultFetchRequest = await supplyChain.fetchRequest.call(requestID)
         // Verify the result set
         assert.equal(resultFetchRequest[0], requestID, 'Error: Invalid item SKU')
         assert.equal(resultFetchRequest[1], requestedAssetName, 'Error: Invalid item UPC')
         assert.equal(resultFetchRequest[2], assetQuantity, 'Error: Missing or Invalid ownerID')
         assert.equal(resultFetchRequest[4], originRetailerID, 'Error: Missing or Invalid originFarmerID')
         assert.equal(resultFetchRequest[5], originRetailerName, 'Error: Missing or Invalid originFarmName')
         assert.equal(resultFetchRequest[6], originCompanyDepartmentID, 'Error: Missing or Invalid originFarmInformation')
         assert.equal(resultFetchRequest[3], 0, 'Error: Invalid item State')
         //assert.equal(eventEmitted, true, 'Invalid event emitted')
         truffleAssert.eventEmitted(result, 'Requested');
        // , (ev) => {
        //     return ev.param1 === resultBufferOne[1];
        // });
    })

    // 2nd Test
    it("Testing smart contract function receiveAsset() that allows a company department to receive an asset request", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        // Watch the emitted event Processed()
        //var event = supplyChain.Processed();
        // Mark an item as Processed by calling function processtItem()
        let result = await supplyChain.receiveAsset(requestID, companyDepartmentPlanningID, upc, {from: companyDepartmentReceivingID});


        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchAssetBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)


        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], assetQuantity, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], requestedAssetName, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], companyDepartmentPlanningID, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferOne[5], originRetailerID, 'Error: Missing or Invalid originFarmInformation')
        assert.equal(resultBufferOne[6], originRetailerName, 'Error: Missing or Invalid originFarmLatitude')
        assert.equal(resultBufferTwo[6], 1, 'Error: Invalid item State')
        //assert.equal(eventEmitted, true, 'Invalid event emitted')
        truffleAssert.eventEmitted(result, 'Received');
    })

    // 3rd Test
    it("Testing smart contract function planAsset() that allows a company department to plan the asset request", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        var eventEmitted = false;
        // Mark an item as Packed by calling function packItem()
        let result = await supplyChain.planAsset(upc, productPrice, productNotes, companyDepartmentApprovingID, {from: companyDepartmentPlanningID});
        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchAssetBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[4], companyDepartmentApprovingID, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Missing or Invalid productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferTwo[6], 2, 'Error: Invalid item State')
        //assert.equal(eventEmitted, true, 'Invalid event emitted')
        truffleAssert.eventEmitted(result, 'Planned');
    })

    // 4th Test
    it("Testing smart contract function approveAsset() that allows a company department to approve the asset request", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as ForSale by calling function sellItem()
        let result = await supplyChain.approveAsset(upc, distributionCenterID, {from: companyDepartmentApprovingID});


        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchAssetBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[4], distributionCenterID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[9], distributionCenterID, 'Error: Missing or Invalid distributionCenterID')
        assert.equal(resultBufferTwo[6], 3, 'Error: Invalid item State')
        //assert.equal(eventEmitted, true, 'Invalid event emitted')
        truffleAssert.eventEmitted(result, 'Approved');

    })

    // 5th Test
    it("Testing smart contract function processAsset() that allows a distribution center to order the asset in case of unavailability", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Mark an item as ForSale by calling function sellItem()
        let result = await supplyChain.processAsset(upc, false, vendorID, {from: distributionCenterID});


        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchAssetBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[4], vendorID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[8], vendorID, 'Error: Missing or Invalid vendorID')
        assert.equal(resultBufferTwo[6], 5, 'Error: Invalid item State')
        //assert.equal(eventEmitted, true, 'Invalid event emitted')
        //truffleAssert.eventEmitted(result, 'Processed');
        truffleAssert.eventEmitted(result, 'Processed', (ev) => {
          return ev.madeOrder==true;
        });
        truffleAssert.eventEmitted(result, 'MadeVendorOrder');
    })

    // // 5th Test
    // it("Testing smart contract function processAsset() that allows a distribution center to process the asset request", async() => {
    //     const supplyChain = await SupplyChain.deployed()
    //     // Mark an item as ForSale by calling function sellItem()
    //     let result = await supplyChain.processAsset(upc, true, vendorID, {from: distributionCenterID});
    //
    //
    //     // Retrieve the just now saved item from blockchain by calling function fetchItem()
    //     const resultBufferOne = await supplyChain.fetchAssetBufferOne.call(upc)
    //     const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)
    //
    //     // Verify the result set
    //     assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
    //     assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
    //     assert.equal(resultBufferOne[4], distributionCenterID, 'Error: Missing or Invalid ownerID')
    //     assert.equal(resultBufferTwo[8], vendorID, 'Error: Missing or Invalid vendorID')
    //     assert.equal(resultBufferTwo[6], 4, 'Error: Invalid item State')
    //     //assert.equal(eventEmitted, true, 'Invalid event emitted')
    //     truffleAssert.eventEmitted(result, 'Processed');
    // })





    // 6th Test
    it("Testing smart contract function dispatchAsset() that allows a vendor to dispatch an asset order", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let result = await supplyChain.dispatchAsset(upc, {from: vendorID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[6], 6, 'Error: Invalid item State')
        truffleAssert.eventEmitted(result, 'DispatchedVendorOrder');

    })

    // 7th Test
    it("Testing smart contract function collectAsset() that allows a distribution center to notify that it has received the asset order", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let result = await supplyChain.collectAsset(upc, {from: distributionCenterID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[6], 7, 'Error: Invalid item State')
        truffleAssert.eventEmitted(result, 'Collected');

    })

    // 8th Test
    it("Testing smart contract function packageAsset() that allows a distribution center to notify that the asset order is packaged", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let result = await supplyChain.packageAsset(upc, {from: distributionCenterID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[6], 8, 'Error: Invalid item State')
        truffleAssert.eventEmitted(result, 'Packaged');

    })

    // 9th Test
    it("Testing smart contract function shipAsset() that allows a distribution center to ship the asset", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let result = await supplyChain.shipAsset(upc, {from: distributionCenterID});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferTwo[6], 9, 'Error: Invalid item State')
        truffleAssert.eventEmitted(result, 'Shipped');

    })

    // 10th Test
    it("Testing smart contract function acquireAsset() that allows a retailer to notify that the asset order is acquired", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let result = await supplyChain.acquireAsset(upc, {from: originRetailerID});

        const resultBufferOne = await supplyChain.fetchAssetBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        // Verify the result set
        assert.equal(resultBufferOne[4], originRetailerID, 'Error: Missing or Invalid ownerID')

        assert.equal(resultBufferTwo[6], 10, 'Error: Invalid item State')
        truffleAssert.eventEmitted(result, 'Acquired');

    })

    // 11th Test
    it("Testing smart contract function sellAsset() that allows a retailer to sell the asset", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let result = await supplyChain.sellAsset(upc, {from: originRetailerID});

        const resultBufferOne = await supplyChain.fetchAssetBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        // Verify the result set
        assert.equal(resultBufferOne[4], originRetailerID, 'Error: Missing or Invalid ownerID')

        assert.equal(resultBufferTwo[6], 11, 'Error: Invalid item State')
        truffleAssert.eventEmitted(result, 'ForSale');

    })

    // 12th Test
    it("Testing smart contract function buyAsset() that allows a customer to buy an asset", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Declare and Initialize a variable for event
        let result = await supplyChain.buyAsset(upc, {from: customerID, value: productPrice});

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchAssetBufferOne.call(upc)
        const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)

        // Verify the result set
        assert.equal(resultBufferOne[4], customerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferTwo[6], 12, 'Error: Invalid item State')
        assert.equal(resultBufferTwo[10], customerID, 'Error: Missing or Invalid distributorID')

        // Watch the emitted event Purchased()
        truffleAssert.eventEmitted(result, 'Sold');

    })

    // 13th Test
    it("Testing smart contract function fetchRequest() that allows anyone to fetch asset request details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultRequest = await supplyChain.fetchRequest.call(requestID)

        // Verify the result set:
        assert.equal(resultRequest[0], requestID, 'Error: Invalid requestID')
        assert.equal(resultRequest[1], requestedAssetName, 'Error: Invalid item UPC')
        assert.equal(resultRequest[2], assetQuantity, 'Error: Missing or Invalid ownerID')
        assert.equal(resultRequest[3], 1, 'Error: Invalid request state')
        assert.equal(resultRequest[4], originRetailerID, 'Error: Missing or Invalid originRetailerID')
        assert.equal(resultRequest[5], originRetailerName, 'Error: Missing or Invalid originRetailerName')
        assert.equal(resultRequest[6], companyDepartmentReceivingID, 'Error: Missing or Invalid companyDepartmentReceivingID')

    })


    // 14th Test
    it("Testing smart contract function fetchAssetBufferOne() that allows anyone to fetch asset details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferOne = await supplyChain.fetchAssetBufferOne.call(upc)

        // Verify the result set:
        assert.equal(resultBufferOne[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferOne[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferOne[2], assetQuantity, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[3], requestedAssetName, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[4], customerID, 'Error: Missing or Invalid ownerID')
        assert.equal(resultBufferOne[5], originRetailerID, 'Error: Missing or Invalid originFarmerID')
        assert.equal(resultBufferOne[6], originRetailerName, 'Error: Missing or Invalid originFarmName')


    })

    // 15th Test
    it("Testing smart contract function fetchAssetBufferTwo() that allows anyone to fetch asset details from blockchain", async() => {
        const supplyChain = await SupplyChain.deployed()

        // Retrieve the just now saved item from blockchain by calling function fetchItem()
        const resultBufferTwo = await supplyChain.fetchAssetBufferTwo.call(upc)

        // Verify the result set:
        assert.equal(resultBufferTwo[0], sku, 'Error: Invalid item SKU')
        assert.equal(resultBufferTwo[1], upc, 'Error: Invalid item UPC')
        assert.equal(resultBufferTwo[2], productID, 'Error: Invalid item productID')
        assert.equal(resultBufferTwo[3], productNotes, 'Error: Invalid item productNotes')
        assert.equal(resultBufferTwo[4], productPrice, 'Error: Invalid item productPrice')
        assert.equal(resultBufferTwo[5], assetIsAvailable, 'Error: Invalid item availability')
        assert.equal(resultBufferTwo[6], 12, 'Error: Missing or Invalid originFarmName')
        assert.equal(resultBufferTwo[7], companyDepartmentApprovingID, 'Error: Missing or Invalid company department approving ID')
        assert.equal(resultBufferTwo[8], vendorID, 'Error: Missing or Invalid vendorID')
        assert.equal(resultBufferTwo[9], distributionCenterID, 'Error: Missing or Invalid distributionCenterID')
        assert.equal(resultBufferTwo[10], customerID, 'Error: Missing or Invalid customerID')

    })

});
