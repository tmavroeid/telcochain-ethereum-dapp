pragma solidity ^0.5.0;
import '../telcoaccesscontrol/CompanyDepartmentRole.sol';
import '../telcoaccesscontrol/CustomerRole.sol';
import '../telcoaccesscontrol/DistributionCenterRole.sol';
import '../telcoaccesscontrol/RetailerRole.sol';
import '../telcoaccesscontrol/VendorRole.sol';
import '../telcocore/Ownable.sol';

// Define a contract 'Supplychain'
contract SupplyChain is Ownable, RetailerRole, CustomerRole, DistributionCenterRole, CompanyDepartmentRole, VendorRole{

  // Define 'owner'
  address payable ownerAddress;

  // Define a variable called 'upc' for Universal Product Code (UPC)
  uint  upc;

  // Define a variable called 'sku' for Stock Keeping Unit (SKU)
  uint  sku;

  //Define the company department (hardcoded in the smart contract), the entry point in the company
  //address companyDepartmentProcessing = "0xfe0df793060c49edca5ac9c104dd8e3375349978";//6th address in test suite

  //address firstDistributionCenter = "0xd37b7b8c62be2fdde8daa9816483aebdbd356088"//4th address in the test suite
  //address secondDistributionCenter = "0x27f184bdc0e7a931b507ddd689d76dba10514bcb"//5th address in the test suite

  //Define a public mapping 'orders' that maps an orderID to an Item
  //mapping (uint => Item) orders;

  // Define a public mapping 'items' that maps the UPC to an Item.
  mapping (uint => Asset) assets;

  //Define a public mapping 'requests' that maps an requestID to an Asset Request
  mapping (uint => Request) requests;
  mapping (address => Request) requestbyretailer;

  //mapping (address => Request[]) requestbyretailer;
  //address[] public requestsAccts;
  // Define a public mapping 'itemsHistory' that maps the UPC to an array of TxHash,
  // that track its journey through the supply chain -- to be sent from DApp.
  mapping (uint => string[]) itemsHistory;

  //mapping (address => Item[]) itemsInventory;
  // Define enum 'State' with the following values:
  enum State
  {
    Requested,  // 0
    Received,  // 1
    Planned,     // 2
    Approved,    // 3
    Processed,       // 4
    MadeVendorOrder, //5
    DispatchedVendorOrder, //6
    Collected, //7
    Packaged,    // 8
    Shipped,   // 9
    Acquired,   //10
    ForSale,   // 11
    Sold   // 12

    }

  State constant defaultState = State.Requested;

  // struct Item{
  //   uint upc;
  //   uint quantity;
  // }
  //
  // mapping (address => Item[]) inventory;
  //
  // address[] public inventoryAccts;
  // uint[] public upcs;

  struct Request{
    uint    requestID; //Request ID of each asset identifying every request made by retailers
    string  name; //Name of the asset
    uint    quantity; // Quantity of asset
    State   itemState;  // Request State as represented in the enum above
    address payable originRetailerID; // Metamask-Ethereum address of the Retailer
    string  originRetailerName; // Retailer Name
    address originCompanyDepartmentID;
  }

  // Define a struct 'Item' with the following fields:
  struct Asset {
    uint    sku;  // Stock Keeping Unit (SKU)
    uint    upc; // Universal Product Code (UPC), generated by the Company, goes on the asset, can be verified by the Consumer
    uint    quantity; // Quantity of asset
    string  name; //Name of the asset
    address ownerID;  // Metamask-Ethereum address of the current owner as the product moves through 8 stages
    address payable originRetailerID; // Metamask-Ethereum address of the CompanyDepartment
    string  originRetailerName; // Retailer Name
    uint    productID;  // Product ID potentially a combination of upc + sku
    string  productNotes; // Product Notes
    uint    productPrice; // Product Price
    bool    isAvailable;
    State   itemState;  // Product State as represented in the enum above
    address originCompanyDepartmentID;
    address vendorID;
    address distributionCenterID;  // Metamask-Ethereum address of the Distributor
    address payable customerID; // Metamask-Ethereum address of the Consumer
  }

  // Define 8 events with the same 8 state values and accept 'upc' as input argument
  event Requested(uint requestid);
  event Received(uint upc);
  event Planned(uint upc);
  event Approved(uint upc);
  event Processed(uint upc, bool madeOrder);
  event MadeVendorOrder(uint upc);
  event DispatchedVendorOrder(uint upc);
  event Collected(uint upc);
  event Packaged(uint upc);
  event Shipped(uint upc);
  event Acquired(uint upc);
  event ForSale(uint upc);
  event Sold(uint upc);


  // Define a modifer that checks to see if msg.sender == owner of the contract
  modifier onlyOwner() {
    require(msg.sender == ownerAddress, "Only the owner can kill this contract");
    _;
  }

  // Define a modifer that verifies the Caller
  modifier verifyCaller (address _address) {
    require(msg.sender == _address);
    _;
  }

  // Define a modifier that checks if the paid amount is sufficient to cover the price
  modifier paidEnough(uint _price) {
    require(msg.value >= _price);
    _;
  }

  // Define a modifier that checks the price and refunds the remaining balance
  modifier checkValue(uint _upc) {
    _;
    uint _price = assets[_upc].productPrice;
    uint amountToReturn = msg.value - _price;
    assets[_upc].customerID.transfer(amountToReturn);
  }

  // Define a modifier that checks if an item.state of a upc is Harvested
  modifier requested(uint _requestID) {
    require(requests[_requestID].itemState == State.Requested);
    _;
  }

  modifier received(uint _upc){
    require(assets[_upc].itemState == State.Received);
    _;
  }

  modifier planned(uint _upc){
    require(assets[_upc].itemState == State.Planned);
    _;
  }

  modifier approved(uint _upc){
    require(assets[_upc].itemState == State.Approved);
    _;
  }

  modifier processed(uint _upc){
    require(assets[_upc].itemState == State.Processed);
    _;
  }

  modifier availabilityCheck(uint _upc){
    require(assets[_upc].itemState == State.Processed || assets[_upc].itemState == State.Collected);
    _;
  }

  modifier madevendororder(uint _upc){
    require(assets[_upc].itemState == State.MadeVendorOrder);
    _;
  }

  modifier dispatchedvendororder(uint _upc){
    require(assets[_upc].itemState == State.DispatchedVendorOrder);
    _;
  }

  modifier packaged(uint _upc){
    require(assets[_upc].itemState == State.Packaged);
    _;
  }

  modifier shipped(uint _upc){
    require(assets[_upc].itemState == State.Shipped);
    _;
  }

  modifier acquired(uint _upc){
    require(assets[_upc].itemState == State.Acquired);
    _;
  }

  // Define a modifier that checks if an item.state of a upc is ForSale
  modifier forSale(uint _upc) {
    require(assets[_upc].itemState == State.ForSale);
    _;
  }


  // In the constructor set 'owner' to the address that instantiated the contract
  // and set 'sku' to 1
  // and set 'upc' to 1
  constructor() public payable {
    ownerAddress = msg.sender;
    sku = 1;
    upc = 1;

  }

  // Define a function 'kill' if required
  function mortalKill() public {
    if (msg.sender == ownerAddress) {

      selfdestruct(ownerAddress);
    }
  }

  // Define a function 'harvestItem' that allows a farmer to mark an item 'Harvested'
  function requestAsset(uint _requestID, string memory _name, uint _quantity, address payable _originRetailerID, string memory _originRetailerName, address _companyDepartmentReceiving) public

  {//string memory _name, address payable _originRetailerID, string memory _originRetailerName, string memory _productNotes
    //productID
    //uint256 _productID = _upc + sku;
    // Add the new item as part of Harvest
    //I made requests[] because of the fact that UPC and SKU cannot be created by the retailer
    requests[_requestID] = Request({requestID: _requestID, name: _name, quantity: _quantity, itemState: State.Requested, originRetailerID: _originRetailerID, originRetailerName: _originRetailerName, originCompanyDepartmentID: _companyDepartmentReceiving});

    //requestbyretailer[msg.sender].push(request);
    //requestbyretailer[msg.sender] = request;
    //requestsAccts.push(msg.sender)-1;

    // Emit the appropriate event
    emit Requested(_requestID);
  }

  // Define a function 'receivetItem' that allows the companyDepartment that firsts receive the asset request to mark an item asset as 'Received'
  function receiveAsset(uint _requestID, address _companyDepartmentPlanningID, uint _upc) public requested(_requestID) verifyCaller(requests[_requestID].originCompanyDepartmentID) returns(string memory)

  {
    if (uint(requests[_requestID].itemState) == 0){
      //productID
      uint256 _productID = _upc + sku;
      address payable _originRetailer = requests[_requestID].originRetailerID;
      string memory _retailerName = requests[_requestID].originRetailerName;
      uint _quantityOfAsset = requests[_requestID].quantity;
      string memory _assetNameSetInRequest = requests[_requestID].name;
      requests[_requestID].itemState = State.Received;
      // Add the new item as part of Harvest
      assets[_upc] = Asset({sku: sku, upc: _upc, quantity: _quantityOfAsset, name: _assetNameSetInRequest, ownerID: _companyDepartmentPlanningID, originRetailerID: _originRetailer, originRetailerName: _retailerName, productID: _productID, productNotes: "", productPrice: 0, isAvailable: false, itemState: State.Received, originCompanyDepartmentID: _companyDepartmentPlanningID, vendorID: 0x0000000000000000000000000000000000000000, distributionCenterID: address(0), customerID: address(0) });
      // Increment sku
      sku = sku + 1;
      // Emit the appropriate event
      emit Received(_upc);
    }else{
      return "The request is already Received";
    }
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function planAsset(uint _upc, uint _productPrice, string memory _productNotes, address _companyDepartmentApprovingID) public
  // Call modifier to check if upc has passed previous supply chain stage
  received(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(assets[_upc].originCompanyDepartmentID)
  {
    // Update the appropriate fields
    assets[_upc].itemState = State.Planned;
    assets[_upc].productPrice = _productPrice;
    assets[_upc].productNotes = _productNotes;
    assets[_upc].ownerID = _companyDepartmentApprovingID;
    assets[_upc].originCompanyDepartmentID = _companyDepartmentApprovingID;
    // Emit the appropriate event
    emit Planned(_upc);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function approveAsset(uint _upc, address _distributioncenterID) public
  // Call modifier to check if upc has passed previous supply chain stage
  planned(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(assets[_upc].originCompanyDepartmentID)
  {
    // Update the appropriate fields
    assets[_upc].itemState = State.Approved;
    assets[_upc].ownerID = _distributioncenterID;
    assets[_upc].distributionCenterID = _distributioncenterID;
    // Emit the appropriate event
    emit Approved(_upc);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function processAsset(uint _upc, bool _isavailable, address _vendorID) public
  // Call modifier to check if upc has passed previous supply chain stage
  approved(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(assets[_upc].distributionCenterID)
  {

    // Update the appropriate fields
    assets[_upc].isAvailable = _isavailable;
    assets[_upc].itemState = State.Processed;
    assets[_upc].vendorID = _vendorID;

    if(_isavailable){
      emit Processed(_upc,!_isavailable);
    }else{
      assets[_upc].ownerID = _vendorID;
      emit Processed(_upc,!_isavailable);
      makeVendorOrder(_upc);

    }
  }

  function makeVendorOrder(uint _upc) public
  processed(_upc)
  verifyCaller(assets[_upc].distributionCenterID)
  {
    assets[_upc].itemState = State.MadeVendorOrder;
    emit MadeVendorOrder(_upc);
  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function dispatchAsset(uint _upc) public
  // Call modifier to check if upc has passed previous supply chain stage
  madevendororder(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(assets[_upc].vendorID)
  {

    assets[_upc].itemState = State.DispatchedVendorOrder;
    emit DispatchedVendorOrder(_upc);

  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function collectAsset(uint _upc) public
  // Call modifier to check if upc has passed previous supply chain stage
  dispatchedvendororder(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(assets[_upc].distributionCenterID)
  {
    assets[_upc].isAvailable = true;
    assets[_upc].itemState = State.Collected;
    emit Collected(_upc);

  }

  // Define a function 'packItem' that allows a farmer to mark an item 'Packed'
  function packageAsset(uint _upc) public
  // Call modifier to check if upc has passed previous supply chain stage
  availabilityCheck(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(assets[_upc].distributionCenterID)
  {

    // Update the appropriate fields
    assets[_upc].itemState = State.Packaged;

    emit Packaged(_upc);

  }

  // Use the above modifers to check if the item is sold
  function shipAsset(uint _upc) public
    // Call modifier to check if upc has passed previous supply chain stage
    packaged(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(assets[_upc].distributionCenterID)
    {
    // Update the appropriate fields
    assets[_upc].itemState = State.Shipped;
    // Emit the appropriate event
    emit Shipped(_upc);
  }

  // Use the above modifers to check if the item is sold
  function acquireAsset(uint _upc) public
    // Call modifier to check if upc has passed previous supply chain stage
    shipped(_upc)
    // Call modifier to verify caller of this function
    verifyCaller(assets[_upc].originRetailerID)
    {
    // Update the appropriate fields
    assets[_upc].itemState = State.Acquired;
    assets[_upc].ownerID = msg.sender;
    // Emit the appropriate event
    emit Acquired(_upc);
  }

  // Define a function 'sellItem' that allows a farmer to mark an item 'ForSale'
  function sellAsset(uint _upc) public
  // Call modifier to check if upc has passed previous supply chain stage
  acquired(_upc)
  // Call modifier to verify caller of this function
  verifyCaller(assets[_upc].originRetailerID)
  {
    // Update the appropriate fields
    assets[_upc].itemState = State.ForSale;
    // Emit the appropriate event
    emit ForSale(_upc);
  }

  // and any excess ether sent is refunded back to the buyer
  function buyAsset(uint _upc) public payable
    // Call modifier to check if upc has passed previous supply chain stage
    forSale(_upc)
    // Call modifer to check if buyer has paid enough
    paidEnough(assets[_upc].productPrice)
    // Call modifer to send any excess ether back to buyer
    checkValue(_upc)
    {

    // Update the appropriate fields - ownerID, distributorID, itemState
    assets[_upc].itemState = State.Sold;
    assets[_upc].ownerID = msg.sender;
    assets[_upc].customerID = msg.sender;
    // Transfer money to farmer
    uint price = assets[_upc].productPrice;
    assets[_upc].originRetailerID.transfer(price);
    // emit the appropriate event
    emit Sold(_upc);
  }


  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchRequest(uint _requestID) public view returns
  (
  uint    requestID, //Request ID of each asset identifying every request made by retailers
  string memory assetName, //Name of the asset
  uint    assetQuantity, // Quantity of asset
  uint    itemState,
  address originRetailerID, // Metamask-Ethereum address of the Retailer
  string memory originRetailerName, // Retailer Name
  address originCompanyDepartmentID
  )
  {
  // Assign values to the 8 parameters
  requestID = requests[_requestID].requestID;
  assetName = requests[_requestID].name;
  assetQuantity = requests[_requestID].quantity;
  itemState = uint(requests[_requestID].itemState);//converts type State of itemState to uint
  originRetailerID = requests[_requestID].originRetailerID;
  originRetailerName = requests[_requestID].originRetailerName;
  originCompanyDepartmentID = requests[_requestID].originCompanyDepartmentID;

  return
  (
  requestID,
  assetName,
  assetQuantity,
  itemState,
  originRetailerID,
  originRetailerName,
  originCompanyDepartmentID
  );
  }

  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchRequestByRetailer(address _retailerID) public view returns
  (
  uint    requestID, //Request ID of each asset identifying every request made by retailers
  string memory assetName, //Name of the asset
  uint    assetQuantity, // Quantity of asset
  uint    itemState,
  address originRetailerID, // Metamask-Ethereum address of the Retailer
  string memory originRetailerName, // Retailer Name
  address originCompanyDepartmentID
  )
  {
  // Assign values to the 8 parameters
  requestID = requestbyretailer[_retailerID].requestID;
  assetName = requestbyretailer[_retailerID].name;
  assetQuantity = requestbyretailer[_retailerID].quantity;
  itemState = uint(requestbyretailer[_retailerID].itemState);//converts type State of itemState to uint
  originRetailerID = requestbyretailer[_retailerID].originRetailerID;
  originRetailerName = requestbyretailer[_retailerID].originRetailerName;
  originCompanyDepartmentID = requestbyretailer[_retailerID].originCompanyDepartmentID;

  return
  (
  requestID,
  assetName,
  assetQuantity,
  itemState,
  originRetailerID,
  originRetailerName,
  originCompanyDepartmentID
  );
  }
  // Define a function 'fetchItemBufferOne' that fetches the data
  function fetchAssetBufferOne(uint _upc) public view returns
  (
  uint    assetSKU,
  uint    assetUPC,
  uint    assetQuantity,
  string  memory assetName,
  address ownerID,
  address originRetailerID,
  string  memory originRetailerName

  )
  {
  // Assign values to the 8 parameters
  assetSKU = assets[_upc].sku;
  assetUPC = assets[_upc].upc;
  assetQuantity = assets[_upc].quantity;
  assetName = assets[_upc].name;
  ownerID = assets[_upc].ownerID;
  originRetailerID = assets[_upc].originRetailerID;
  originRetailerName = assets[_upc].originRetailerName;


  return
  (
  assetSKU,
  assetUPC,
  assetQuantity,
  assetName,
  ownerID,
  originRetailerID,
  originRetailerName
  );
  }

  // Define a function 'fetchItemBufferTwo' that fetches the data
  function fetchAssetBufferTwo(uint _upc) public view returns
  (
  uint    assetSKU,
  uint    assetUPC,
  uint    productID,
  string  memory productNotes,
  uint    productPrice,
  bool    isAvailable,
  uint    itemState,
  address originCompanyDepartmentID,
  address vendorID,
  address distributionCenterID,
  address customerID
  )
  {
  // Assign values to the 9 parameters
  assetSKU = assets[_upc].sku;
  assetUPC = assets[_upc].upc;
  productID = assets[_upc].productID;
  productNotes = assets[_upc].productNotes;
  productPrice = assets[_upc].productPrice;
  isAvailable = assets[_upc].isAvailable;
  itemState = uint(assets[_upc].itemState);//converts type State of itemState to uint
  originCompanyDepartmentID = assets[_upc].originCompanyDepartmentID;
  vendorID = assets[_upc].vendorID;
  distributionCenterID = assets[_upc].distributionCenterID;
  customerID = assets[_upc].customerID;


  return
  (
    assetSKU,
    assetUPC,
    productID,
    productNotes,
    productPrice,
    isAvailable,
    itemState,
    originCompanyDepartmentID,
    vendorID,
    distributionCenterID,
    customerID
  );
  }
}
